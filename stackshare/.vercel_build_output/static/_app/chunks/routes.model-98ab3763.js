class r{async getRequest(s,t={}){return await fetch(s,{method:"GET",headers:t})}async postRequest(s,t,o={}){return await fetch(s,{method:"POST",headers:o,body:JSON.stringify(t)})}async patchRequest(s,t,o={}){return await fetch(s,{method:"PATCH",headers:o,body:JSON.stringify(t)})}async deleteRequest(s,t,o={}){return await fetch(s,{method:"DELETE",headers:o,body:JSON.stringify(t)})}}class n{constructor(){this.setCookie=(s,t)=>{const o=new Date;o.setTime(o.getTime()+7*24*60*60*1e3),document.cookie=s+"="+t+"; expires="+o.toUTCString()+"; path=/"},this.getCookie=s=>{{const o=("; "+document.cookie).split("; "+s+"=");if(o.length==2)return o.pop().split(";").shift()}},this.deleteCookie=s=>{{const t=new Date;t.setTime(t.getTime()+-1*24*60*60*1e3),document.cookie=s+"=; expires="+t.toUTCString()+"; path=/"}}}}class e{}e.baseUrl="http://localhost:5050";e.login="login";e.register="register";e.status="status";e.questions="questions";e.categories="categories";e.add="add";class a{}a.login=e.baseUrl+"/"+e.login;a.register=e.baseUrl+"/"+e.register;a.checkUser=e.baseUrl+"/"+e.status;a.questions=e.baseUrl+"/"+e.questions;a.categories=e.baseUrl+"/"+e.categories;a.addQuestion=e.baseUrl+"/"+e.questions+"/"+e.add;export{r as C,a as R,n as S};
